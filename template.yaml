AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: >
  SAM Template to create a DynamoDB table and an API with Lambda functions for CRUD operations.

Parameters:
  StageName:
    Type: String
    Default: dev
    Description: The deployment stage of the API Gateway

Globals:
  Function:
    Runtime: python3.10
    Timeout: 10
    MemorySize: 128
    Environment:
      Variables:
        TABLE_NAME: !Ref InventoryTable

Resources:
  InventoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Inventory
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "GSI_id"
          AttributeType: "S"
        - AttributeName: "location_id"
          AttributeType: "N"
        - AttributeName: "GSI_location_id"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "location_id"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      GlobalSecondaryIndexes:
        - IndexName: "GSI_location_id"
          KeySchema:
            - AttributeName: "GSI_location_id"
              KeyType: "HASH"
            - AttributeName: "GSI_id"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  CreateInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/add_inventory_item/
      Handler: lambda_function.lambda_handler
      Role: arn:aws:iam::020556156190:role/LabRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /inventory
            Method: POST
            RestApiId:
              Ref: InventoryApi

  GetAllInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/get_all_inventory_items/
      Handler: lambda_function.lambda_handler
      Role: arn:aws:iam::020556156190:role/LabRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /inventory
            Method: GET
            RestApiId:
              Ref: InventoryApi

  GetInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/get_inventory_item/
      Handler: lambda_function.lambda_handler
      Role: arn:aws:iam::020556156190:role/LabRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /inventory/{id}
            Method: GET
            RestApiId:
              Ref: InventoryApi

  DeleteInventoryItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/delete_inventory_item/
      Handler: lambda_function.lambda_handler
      Role: arn:aws:iam::020556156190:role/LabRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /inventory/{id}
            Method: DELETE
            RestApiId:
              Ref: InventoryApi

  GetLocationInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/get_location_inventory_items/
      Handler: lambda_function.lambda_handler
      Role: arn:aws:iam::020556156190:role/LabRole
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /inventory/location/{location_id}
            Method: GET
            RestApiId:
              Ref: InventoryApi

  InventoryApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: InventoryApi
      StageName: !Ref StageName

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${InventoryApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
